diff -Naur graphsurgeon/DynamicGraph.py graphsurgeon_mod/DynamicGraph.py
--- graphsurgeon/DynamicGraph.py	2020-01-24 13:52:46.318996023 +0000
+++ graphsurgeon_mod/DynamicGraph.py	2020-01-24 14:00:53.447979973 +0000
@@ -1,7 +1,7 @@
 import copy
 from graphsurgeon import StaticGraph
 from graphsurgeon._utils import _get_node_names, _handle_single_nodes
-from tensorflow import GraphDef, NodeDef
+from tensorflow.compat.v1 import GraphDef, NodeDef
 from collections import OrderedDict
 
 try:
diff -Naur graphsurgeon/StaticGraph.py graphsurgeon_mod/StaticGraph.py
--- graphsurgeon/StaticGraph.py	2020-01-24 13:52:46.318996023 +0000
+++ graphsurgeon_mod/StaticGraph.py	2020-01-24 14:00:53.447979973 +0000
@@ -5,6 +5,7 @@
 from collections import defaultdict
 # For Graph Search funcitons
 from graphsurgeon._utils import _regex_list_contains_string, _generate_iterable_for_search, _clean_input_name
+from tensorflow.compat.v1 import GraphDef
 
 class StaticGraph(object):
     '''
@@ -21,7 +22,7 @@
     '''
     # Constructor using a TF graphdef
     def __init__(self, graphdef=None):
-        self._internal_graphdef = tf.GraphDef()
+        self._internal_graphdef = GraphDef()
         self.node_outputs = {}
         self.node_map = {}
         self.graph_outputs = {}
@@ -30,7 +31,7 @@
             if isinstance(graphdef, str):
                 # Handle pb files
                 self.read(graphdef)
-            elif isinstance(graphdef, tf.GraphDef):
+            elif isinstance(graphdef, GraphDef):
                 # And tf.GraphDefs
                 self._internal_graphdef = graphdef
                 self._initialize_analysis_data()
@@ -122,7 +123,7 @@
         Returns:
             None
         '''
-        with tf.gfile.GFile(filename, "rb") as frozen_pb:
+        with tf.io.gfile.GFile(filename, "rb") as frozen_pb:
             self._internal_graphdef.ParseFromString(frozen_pb.read())
         self._initialize_analysis_data()
 
diff -Naur graphsurgeon/_utils.py graphsurgeon_mod/_utils.py
--- graphsurgeon/_utils.py	2020-01-24 13:52:46.318996023 +0000
+++ graphsurgeon_mod/_utils.py	2020-01-24 14:00:53.447979973 +0000
@@ -1,5 +1,5 @@
 import re
-from tensorflow import NodeDef
+from tensorflow.compat.v1 import NodeDef
 
 def _string_matches_regex(match_string, regex):
     # Check for exact matches.
diff -Naur graphsurgeon/node_manipulation.py graphsurgeon_mod/node_manipulation.py
--- graphsurgeon/node_manipulation.py	2020-01-24 13:52:46.318996023 +0000
+++ graphsurgeon_mod/node_manipulation.py	2020-01-24 14:00:53.447979973 +0000
@@ -1,5 +1,7 @@
 import tensorflow as tf
 import numpy as np
+from tensorflow.compat.v1 import NodeDef
+
 # Compatibility with Python 3.X where basestring no longer exists.
 try:
     basestring
@@ -48,7 +50,7 @@
         elif key == "inputs":
             # Accept either nodes or strings. This method accepts mixed lists too.
             for input_node in val:
-                if isinstance(input_node, tf.NodeDef):
+                if isinstance(input_node, NodeDef):
                     node.input.append(input_node.name)
                 elif isinstance(input_node, basestring):
                     node.input.append(input_node)
@@ -102,7 +104,7 @@
     '''
     if not trt_plugin:
         print("WARNING: To create TensorRT plugin nodes, please use the `create_plugin_node` function instead.")
-    node = tf.NodeDef()
+    node = NodeDef()
     return update_node(node, name, op, trt_plugin, **kwargs)
 
 def create_plugin_node(name, op=None, **kwargs):
