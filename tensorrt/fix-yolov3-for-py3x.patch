diff --git a/samples/python/yolov3_onnx/yolov3_to_onnx.py b/samples/python/yolov3_onnx/yolov3_to_onnx.py
index a1ad16b..c50f592 100644
--- a/samples/python/yolov3_onnx/yolov3_to_onnx.py
+++ b/samples/python/yolov3_onnx/yolov3_to_onnx.py
@@ -1,4 +1,3 @@
-#!/usr/bin/env python2
 #
 # Copyright 1993-2019 NVIDIA Corporation.  All rights reserved.
 #
@@ -86,7 +85,7 @@ class DarkNetParser(object):
         Keyword argument:
         cfg_file_path -- path to the yolov3.cfg file as string
         """
-        with open(cfg_file_path, 'rb') as cfg_file:
+        with open(cfg_file_path, 'r') as cfg_file:
             remainder = cfg_file.read()
             while remainder is not None:
                 layer_dict, layer_name, remainder = self._next_layer(remainder)
@@ -743,7 +742,7 @@ def generate_md5_checksum(local_path):
     Keyword argument:
     local_path -- path of the file whose checksum shall be generated
     """
-    with open(local_path) as local_file:
+    with open(local_path,'rb') as local_file:
         data = local_file.read()
         return hashlib.md5(data).hexdigest()
 
@@ -774,10 +773,7 @@ def download_file(local_path, link, checksum_reference=None):
 
 def main():
     """Run the DarkNet-to-ONNX conversion for YOLOv3-608."""
-    # Have to use python 2 due to hashlib compatibility
-    if sys.version_info[0] > 2:
-        raise Exception("This script is only compatible with python2, please re-run this script with python2. The rest of this sample can be run with either version of python.")
-
+    
     # Download the config for YOLOv3 if not present yet, and analyze the checksum:
     cfg_file_path = download_file(
         'yolov3.cfg',
